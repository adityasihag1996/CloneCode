[{"questionId": "1", "title": "Two Sum", "titleSlug": "two-sum", "content": "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code><font face=\"monospace\">&nbsp;</font>time complexity?", "exampleTestcaseList": ["[2,7,11,15]\n9", "[3,2,4]\n6", "[3,3]\n6"], "skullCode": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        ", "exampleTestcase": [[[2, 7, 11, 15], 9], [[3, 2, 4], 6], [[3, 3], 6]], "exampleTestcaseResult": [[0, 1], [1, 2], [0, 1]], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.twoSum(testCase[0], testCase[1])\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "2", "title": "Add Two Numbers", "titleSlug": "add-two-numbers", "content": "<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum&nbsp;as a linked list.</p>\n\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg\" style=\"width: 483px; height: 342px;\" />\n<pre>\n<strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [7,0,8]\n<strong>Explanation:</strong> 342 + 465 = 807.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [0], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n<strong>Output:</strong> [8,9,9,9,0,0,0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n\t<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n", "exampleTestcaseList": ["[2,4,3]\n[5,6,4]", "[0]\n[0]", "[9,9,9,9,9,9,9]\n[9,9,9,9]"], "skullCode": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        ", "exampleTestcase": [[[2, 4, 3], [5, 6, 4]], [[0], [0]], [[9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9]]], "exampleTestcaseResult": [[7, 0, 8], [0], [8, 9, 9, 9, 0, 0, 0, 1]], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.addTwoNumbers(testCase[0], testCase[1])\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "3", "title": "Longest Substring Without Repeating Characters", "titleSlug": "longest-substring-without-repeating-characters", "content": "<p>Given a string <code>s</code>, find the length of the <strong>longest</strong> <span data-keyword=\"substring-nonempty\"><strong>substring</strong></span> without repeating characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;abc&quot;, with the length of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbbbb&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The answer is &quot;b&quot;, with the length of 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pwwkew&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;wke&quot;, with the length of 3.\nNotice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>\n</ul>\n", "exampleTestcaseList": ["\"abcabcbb\"", "\"bbbbb\"", "\"pwwkew\""], "skullCode": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ", "exampleTestcase": ["abcabcbb", "bbbbb", "pwwkew"], "exampleTestcaseResult": [3, 1, 3], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.lengthOfLongestSubstring(testCase)\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "4", "title": "Median of Two Sorted Arrays", "titleSlug": "median-of-two-sorted-arrays", "content": "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p>\n\n<p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3], nums2 = [2]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> merged array = [1,2,3] and median is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]\n<strong>Output:</strong> 2.50000\n<strong>Explanation:</strong> merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["[1,3]\n[2]", "[1,2]\n[3,4]"], "skullCode": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        ", "exampleTestcase": [[[1, 3], [2]], [[1, 2], [3, 4]]], "exampleTestcaseResult": [2.0, 2.5], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.findMedianSortedArrays(testCase[0], testCase[1])\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "5", "title": "Longest Palindromic Substring", "titleSlug": "longest-palindromic-substring", "content": "<p>Given a string <code>s</code>, return <em>the longest</em> <span data-keyword=\"palindromic-string\"><em>palindromic</em></span> <span data-keyword=\"substring-nonempty\"><em>substring</em></span> in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babad&quot;\n<strong>Output:</strong> &quot;bab&quot;\n<strong>Explanation:</strong> &quot;aba&quot; is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> &quot;bb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of only digits and English letters.</li>\n</ul>\n", "exampleTestcaseList": ["\"babad\"", "\"cbbd\""], "skullCode": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ", "exampleTestcase": ["babad", "cbbd"], "exampleTestcaseResult": ["bab", "bb"], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.longestPalindrome(testCase)\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "6", "title": "Zigzag Conversion", "titleSlug": "zigzag-conversion", "content": "<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n\n<pre>\nP   A   H   N\nA P L S I I G\nY   I   R\n</pre>\n\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\n\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\n\n<pre>\nstring convert(string s, int numRows);\n</pre>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 3\n<strong>Output:</strong> &quot;PAHNAPLSIIGYIR&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 4\n<strong>Output:</strong> &quot;PINALSIGYAHRPI&quot;\n<strong>Explanation:</strong>\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A&quot;, numRows = 1\n<strong>Output:</strong> &quot;A&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), <code>&#39;,&#39;</code> and <code>&#39;.&#39;</code>.</li>\n\t<li><code>1 &lt;= numRows &lt;= 1000</code></li>\n</ul>\n", "exampleTestcaseList": ["\"PAYPALISHIRING\"\n3", "\"PAYPALISHIRING\"\n4", "\"A\"\n1"], "skullCode": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        ", "exampleTestcase": [["PAYPALISHIRING", 3], ["PAYPALISHIRING", 4], ["A", 1]], "exampleTestcaseResult": ["PAHNAPLSIIGYIR", "PINALSIGYAHRPI", "A"], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.convert(testCase[0], testCase[1])\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "7", "title": "Reverse Integer", "titleSlug": "reverse-integer", "content": "<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code><em> with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p>\n\n<p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 123\n<strong>Output:</strong> 321\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -123\n<strong>Output:</strong> -321\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 120\n<strong>Output:</strong> 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "exampleTestcaseList": ["123", "-123", "120"], "skullCode": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        ", "exampleTestcase": [123, -123, 120], "exampleTestcaseResult": [321, -321, 21], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.reverse(testCase)\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "8", "title": "String to Integer (atoi)", "titleSlug": "string-to-integer-atoi", "content": "<p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer (similar to C/C++&#39;s <code>atoi</code> function).</p>\n\n<p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p>\n\n<ol>\n\t<li>Read in and ignore any leading whitespace.</li>\n\t<li>Check if the next character (if not already at the end of the string) is <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code>. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.</li>\n\t<li>Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.</li>\n\t<li>Convert these digits into an integer (i.e. <code>&quot;123&quot; -&gt; 123</code>, <code>&quot;0032&quot; -&gt; 32</code>). If no digits were read, then the integer is <code>0</code>. Change the sign as necessary (from step 2).</li>\n\t<li>If the integer is out of the 32-bit signed integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then clamp the integer so that it remains in the range. Specifically, integers less than <code>-2<sup>31</sup></code> should be clamped to <code>-2<sup>31</sup></code>, and integers greater than <code>2<sup>31</sup> - 1</code> should be clamped to <code>2<sup>31</sup> - 1</code>.</li>\n\t<li>Return the integer as the final result.</li>\n</ol>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Only the space character <code>&#39; &#39;</code> is considered a whitespace character.</li>\n\t<li><strong>Do not ignore</strong> any characters other than the leading whitespace or the rest of the string after the digits.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;42&quot;\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The underlined characters are what is read in, the caret is the current reader position.\nStep 1: &quot;42&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;42&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>42</u>&quot; (&quot;42&quot; is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 42.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;   -42&quot;\n<strong>Output:</strong> -42\n<strong>Explanation:</strong>\nStep 1: &quot;<u>   </u>-42&quot; (leading whitespace is read and ignored)\n            ^\nStep 2: &quot;   <u>-</u>42&quot; (&#39;-&#39; is read, so the result should be negative)\n             ^\nStep 3: &quot;   -<u>42</u>&quot; (&quot;42&quot; is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is -42.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;4193 with words&quot;\n<strong>Output:</strong> 4193\n<strong>Explanation:</strong>\nStep 1: &quot;4193 with words&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;4193 with words&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>4193</u> with words&quot; (&quot;4193&quot; is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 4193.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>&#39; &#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, and <code>&#39;.&#39;</code>.</li>\n</ul>\n", "exampleTestcaseList": ["\"42\"", "\"   -42\"", "\"4193 with words\""], "skullCode": "class Solution(object):\n    def myAtoi(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ", "exampleTestcase": ["42", "   -42", "4193 with words"], "exampleTestcaseResult": [42, -42, 4193], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.myAtoi(testCase)\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "9", "title": "Palindrome Number", "titleSlug": "palindrome-number", "content": "<p>Given an integer <code>x</code>, return <code>true</code><em> if </em><code>x</code><em> is a </em><span data-keyword=\"palindrome-integer\"><em><strong>palindrome</strong></em></span><em>, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 121\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 121 reads as 121 from left to right and from right to left.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -121\n<strong>Output:</strong> false\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 10\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without converting the integer to a string?", "exampleTestcaseList": ["121", "-121", "10"], "skullCode": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        ", "exampleTestcase": [121, -121, 10], "exampleTestcaseResult": [true, false, false], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.isPalindrome(testCase)\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "10", "title": "Regular Expression Matching", "titleSlug": "regular-expression-matching", "content": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> Matches any single character.\u200b\u200b\u200b\u200b</li>\n\t<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &#39;*&#39; means zero or more of the preceding element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, p = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 20</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and&nbsp;<code>&#39;*&#39;</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>\n</ul>\n", "exampleTestcaseList": ["\"aa\"\n\"a\"", "\"aa\"\n\"a*\"", "\"ab\"\n\".*\""], "skullCode": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        ", "exampleTestcase": [["aa", "a"], ["aa", "a*"], ["ab", ".*"]], "exampleTestcaseResult": [false, true, true], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.isMatch(testCase[0], testCase[1])\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "11", "title": "Container With Most Water", "titleSlug": "container-with-most-water", "content": "<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p>\n\n<p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p>\n\n<p>Return <em>the maximum amount of water a container can store</em>.</p>\n\n<p><strong>Notice</strong> that you may not slant the container.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" />\n<pre>\n<strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]\n<strong>Output:</strong> 49\n<strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [1,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["[1,8,6,2,5,4,8,3,7]", "[1,1]"], "skullCode": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        ", "exampleTestcase": [[1, 8, 6, 2, 5, 4, 8, 3, 7], [1, 1]], "exampleTestcaseResult": [49, 1], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.maxArea(testCase)\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "12", "title": "Integer to Roman", "titleSlug": "integer-to-roman", "content": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given an integer, convert it to a roman numeral.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 3\n<strong>Output:</strong> &quot;III&quot;\n<strong>Explanation:</strong> 3 is represented as 3 ones.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 58\n<strong>Output:</strong> &quot;LVIII&quot;\n<strong>Explanation:</strong> L = 50, V = 5, III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1994\n<strong>Output:</strong> &quot;MCMXCIV&quot;\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 3999</code></li>\n</ul>\n", "exampleTestcaseList": ["3", "58", "1994"], "skullCode": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        ", "exampleTestcase": [3, 58, 1994], "exampleTestcaseResult": ["III", "LVIII", "MCMXCIV"], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.intToRoman(testCase)\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "13", "title": "Roman to Integer", "titleSlug": "roman-to-integer", "content": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two ones added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given a roman numeral, convert it to an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;III&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LVIII&quot;\n<strong>Output:</strong> 58\n<strong>Explanation:</strong> L = 50, V= 5, III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;MCMXCIV&quot;\n<strong>Output:</strong> 1994\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 15</code></li>\n\t<li><code>s</code> contains only&nbsp;the characters <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code>.</li>\n\t<li>It is <strong>guaranteed</strong>&nbsp;that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li>\n</ul>\n", "exampleTestcaseList": ["\"III\"", "\"LVIII\"", "\"MCMXCIV\""], "skullCode": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ", "exampleTestcase": ["III", "LVIII", "MCMXCIV"], "exampleTestcaseResult": [3, 58, 1994], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.romanToInt(testCase)\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "14", "title": "Longest Common Prefix", "titleSlug": "longest-common-prefix", "content": "<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n\n<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n<strong>Output:</strong> &quot;fl&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There is no common prefix among the input strings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>\n\t<li><code>strs[i]</code> consists of only lowercase English letters.</li>\n</ul>\n", "exampleTestcaseList": ["[\"flower\",\"flow\",\"flight\"]", "[\"dog\",\"racecar\",\"car\"]"], "skullCode": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        ", "exampleTestcase": [["flower", "flow", "flight"], ["dog", "racecar", "car"]], "exampleTestcaseResult": ["fl", ""], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.longestCommonPrefix(testCase)\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}, {"questionId": "15", "title": "3Sum", "titleSlug": "3sum", "content": "<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n<strong>Explanation:</strong> \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,1]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The only possible triplet does not sum up to 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0]\n<strong>Output:</strong> [[0,0,0]]\n<strong>Explanation:</strong> The only possible triplet sums up to 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["[-1,0,1,2,-1,-4]", "[0,1,1]", "[0,0,0]"], "skullCode": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "exampleTestcase": [[-1, 0, 1, 2, -1, -4], [0, 1, 1], [0, 0, 0]], "exampleTestcaseResult": [[[-1, -1, 2], [-1, 0, 1]], [], [[0, 0, 0]]], "inplaceResult": false, "runnerSkeletonCode": "\nimport time\n\nif __name__ == \"__main__\":\n    testCase = #$HERE GOES THE TESTCASE#$\n    testCasesResult = #$HERE GOES THE TESTCASE RESULT#$\n\n    solnRunner = Solution()\n    solnRunnerResult = None\n    solnRunnerResultsMatch = None\n    solnRunnerResultsTime = None\n\n    try:\n        start_time = time.time_ns()\n        solnRunnerResult = solnRunner.threeSum(testCase)\n        end_time = time.time_ns()\n\n        solnRunnerResultsTime = round((end_time - start_time) / 1_000_000, 2)\n\n        solnRunnerResultsMatch = False\n        if #$HERE GOES THE INPLACE RESULT#$ == True:\n            if type(testCase) == list:\n                solnRunnerResultsMatch = True\n                for tc, tcr in zip(testCase, testCasesResult):\n                    if tc != tcr:\n                        solnRunnerResultsMatch = False\n            else:\n                solnRunnerResultsMatch = testCase == testCasesResult\n        else:\n            solnRunnerResultsMatch = solnRunnerResult == testCasesResult\n\n        print(\"PASSED QWERTY\")\n        print(solnRunnerResultsTime, solnRunnerResultsMatch)\n        print(solnRunnerResult)\n    except Exception as e:\n        ## ERROR IN SUBMITTED CODE\n        print(e)\n"}]